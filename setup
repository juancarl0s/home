#!/bin/bash

# This script prepares a linux desktop environment for this first time by
# installing and configuring a bunch of commonly used applications. Before
# running it, you should read it, understand it, and tweak it as necessary.
# Author: Nathan J Cochran
# Modified by: juancarl0s

if (( $(id -u) == 0 )); then
	printf "Please do not run as root (script will prompt for root credentials when necessary)\n"
	exit 1
fi

printf "\n--------------------\n"
printf "Creating $HOME/bin directory"
printf "\n--------------------\n"
mkdir ~/bin

printf "\n--------------------\n"
printf "Updating system packages"
printf "\n--------------------\n"
sudo apt-get update
sudo apt-get dist-upgrade			# Smarter than upgrade. Handles updating/removing dependencies

printf "\n--------------------\n"
printf "Installing git"
printf "\n--------------------\n"
sudo add-apt-repository ppa:git-core/ppa	# More up-to-date than the default provided by the software manager
sudo apt-get update
sudo apt-get install git-all

printf "\n--------------------\n"
printf "Installing git cola"
printf "\n--------------------\n"
apt-get install git-cola

printf "\n--------------------\n"
printf "Installing byobu"
printf "\n--------------------\n"
sudo apt-get install byobu

printf "\n--------------------\n"
printf "Configuring git"
printf "\n--------------------\n"
git config --global alias.co "checkout"
git config --global alias.b "branch"
git config --global alias.st "status"
git config --global alias.su "submodule update"
git config --global alias.sur "submodule update --remote"
git config --global alias.rso "remote show origin"
git config --global alias.rpo "remote prune origin"
git config --global alias.rao "remote add origin"
git config --global alias.d "diff"
git config --global alias.dc "diff --cached"
git config --global alias.lg "log --all --decorate --oneline --graph"

printf "\n--------------------\n"
printf "Installing go"
printf "\n--------------------\n"
wget -P ~/Downloads https://dl.google.com/go/go1.14.2.linux-amd64.tar.gz
sudo tar -C /usr/local -xzf ~/Downloads/go1.14.2.linux-amd64.tar.gz
export PATH=$PATH:/usr/local/go/bin     # Not permament unless set in $HOME/.profile, but necessary for :GoInstallBinaries to work (see below)

printf "\n--------------------\n"
printf "Installing golang.org/x/tools"
printf "\n--------------------\n"
go get -u golang.org/x/tools/...

printf "\n--------------------\n"
printf "Installing graphviz"
printf "\n--------------------\n"
sudo apt-get install graphviz   # For visualizing dependency graphs - see: https://github.com/golang/dep#visualizing-dependencies

printf "\n--------------------\n"
printf "Installing solarized mate terminal"
printf "\n--------------------\n"
cd ~
git clone https://github.com/oz123/solarized-mate-terminal.git
cd solarized-mate-terminal
./solarized-mate.sh dark
cd ~
rm -rf ./solarized-mate-terminal

printf "\n--------------------\n"
printf "Installing network-manager-l2tp"
printf "\n--------------------\n"
sudo apt install network-manager-l2tp network-manager-l2tp-gnome resolvconf
sudo systemctl restart network-manager

printf "\n--------------------\n"
printf "Disable apache2 service"
printf "\n--------------------\n"
sudo systemctl disable apache2.service

printf "\n--------------------\n"
printf "Installing docker"
printf "\n--------------------\n"
# See: https://docs.docker.com/install/linux/docker-ce/ubuntu/#set-up-the-repository
# And: https://docs.docker.com/install/linux/linux-postinstall/
sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
wget -q -O - https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io
sudo groupadd docker
sudo usermod -aG docker $USER
sudo systemctl enable docker

printf "\n--------------------\n"
printf "Installing docker-compose"
printf "\n--------------------\n"
# See: https://docs.docker.com/compose/install/#install-compose
sudo curl -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose # May need to update version number
sudo chmod +x /usr/local/bin/docker-compose

printf "\n--------------------\n"
printf "Installing chrome"    
printf "\n--------------------\n"
wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add - # See: https://askubuntu.com/a/510186
line='deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main'
file='/etc/apt/sources.list.d/google-chrome.list'
grep -q -F "$line" $file || sudo sh -c "echo \"$line\" >> $file" # Only add line if it doesn't already exist
sudo apt-get update 
sudo apt-get install google-chrome-stable

printf "\n--------------------\n"
printf "Installing postman"
printf "\n--------------------\n"
wget -O ~/Downloads/postman.tar.gz https://dl.pstmn.io/download/latest/linux64 # See: https://blog.bluematador.com/posts/postman-how-to-install-on-ubuntu-1604/
sudo tar -xzf ~/Downloads/postman.tar.gz -C /opt
sudo ln -s /opt/Postman/Postman /usr/bin/postman

printf "\n--------------------\n"
printf "Installing slack"
printf "\n--------------------\n"
wget -P ~/Downloads https://downloads.slack-edge.com/linux_releases/slack-desktop-4.4.2-amd64.deb # May need to update version number (visit slack download page to find it)
sudo apt-get install ~/Downloads/slack-desktop-4.4.2-amd64.deb

printf "\n--------------------\n"
printf "Installing shutter"
printf "\n--------------------\n"
sudo add-apt-repository ppa:linuxuprising/shutter
sudo apt-get install shutter

printf "\n--------------------\n"
printf "Installing peek"
printf "\n--------------------\n"
sudo apt-get install peek

printf "\n--------------------\n"
printf "Installing hub"
printf "\n--------------------\n"
go get -u github.com/github/hub

printf "\n--------------------\n"
printf "Installing github.com/nicheinc/development"
printf "\n--------------------\n"
git clone --recurse-submodules https://github.com/nicheinc/development ~/src/github.com/nicheinc/development/

# Create symbolic links in home directory to niche and development directories
ln -s ~/src/github.com/nicheinc
ln -s ~/src/github.com/nicheinc/development

printf "\n--------------------\n"
printf "Installing github.com/nicheinc/development"
printf "\n--------------------\n"
git clone --recurse-submodules https://github.com/nicheinc/development ~/src/github.com/nicheinc/development/

# Create symbolic links in home directory to niche and development directories
ln -s ~/src/github.com/nicheinc
ln -s ~/src/github.com/nicheinc/development

printf "\n--------------------\n"
printf "Installing nvm"
printf "\n--------------------\n"
wget -q -O - https://raw.githubusercontent.com/creationix/nvm/v0.35.3/install.sh | bash # May need to update version number
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

printf "\n--------------------\n"
printf "Installing node.js"
printf "\n--------------------\n"
nvm install 14.2.0 # Update version

printf "\n--------------------\n"
printf "Installing nodemon"
printf "\n--------------------\n"
npm install -g nodemon

printf "\n--------------------\n"
printf "Installing doctoc"
printf "\n--------------------\n"
npm install -g doctoc

if [ ! -f ~/.ssh/id_rsa ]; then
	# See: https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/
    # NOTE: If you have multiple github accounts, and you want to use ssh for both of them,
    # you will have to run the following commnds twice, creating two different ssh keys. See
    # my .gitconfig and .ssh/config to see how to correctly configure the rest from there.
	printf "Generating ssh key required for github.com/nicheinc dependencies\n"
	ssh-keygen -t rsa -b 4096 -C "$email" -f ~/.ssh/id_rsa -N ''
	eval "$(ssh-agent -s)"
	ssh-add ~/.ssh/id_rsa
	sudo apt-get install xclip
	xclip -sel clip < ~/.ssh/id_rsa.pub
    firefox https://github.com/settings/keys
	printf "\n--------------------\n"
	printf "NOTE: Please log in to github.com, click 'New SSH Key', and paste into the 'Key' textbox (the ssh key has already been copied to your clipboard)\n"
	printf "NOTE: You may give the key any descriptive name you want (e.g. niche-linux)\n"
	printf "NOTE: Once finished, press [Enter] to continue"
	read -s
fi

# Use ssh instead of https by default
git config --global url.ssh://git@github.com/.insteadOf https://github.com/

printf "\n--------------------\n"
printf "Installing uuid-runtime"
printf "\n--------------------\n"
sudo apt-get install uuid-runtime

printf "\n--------------------\n"
printf "Installing xclip"
printf "\n--------------------\n"
sudo apt install xclip

printf "\n--------------------\n"
printf "Installing qbittorrent"
printf "\n--------------------\n"
sudo apt install qbittorrent

printf "\n--------------------\n"
printf "Installing postgreSQL"
printf "\n--------------------\n"
wget -q -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - # See: https://www.postgresql.org/download/linux/ubuntu/
line='deb [arch=amd64] http://apt.postgresql.org/pub/repos/apt/$(lsb_release -cs)-pgdg main'
file='/etc/apt/sources.list.d/pgdg.list'
grep -q -F "$line" $file || sudo sh -c "echo \"$line\" >> $file" # Only add line if it doesn't already exist
sudo apt-get update
sudo apt-get install postgresql-12 		# May need to update version number
sudo apt-get install postgresql-contrib-12

echo -n "Please enter password for default postgres user: "
read password
sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD '$password'"

printf "\n--------------------\n"
printf "Installing pgAdmin"
printf "\n--------------------\n"
sudo apt-get install pgadmin3
sudo apt-get install pgadmin4

printf "\n--------------------\n"
printf "Installing pip and virtualenv"
printf "\n--------------------\n"
sudo apt-get install python-pip python-dev build-essential
sudo pip install --upgrade pip
sudo pip install --upgrade virtualenv

# # Flutter
# wget -P ~/Downloads https://storage.googleapis.com/flutter_infra/releases/stable/linux/flutter_linux_v1.9.1+hotfix.4-stable.tar.xz
# tar xf ~/Downloads/flutter_linux_v1.9.1+hotfix.4-stable.tar.xz ~/src
# export PATH="$PATH:/home/juan/src/flutter/bin"
# flutter config --no-analytics

# wget -P ~/Downloads https://bin.equinox.io/c/VdrWdbjqyF/cloudflared-stable-linux-amd64.deb
# sudo apt-get install ~/Downloads/cloudflared-stable-linux-amd64.deb
# cloudflared -v
# # and follow https://bendews.com/posts/implement-dns-over-https/
